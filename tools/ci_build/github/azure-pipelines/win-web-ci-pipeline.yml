jobs:
- job: Extract_commit
  pool: 'Win-CPU-2019'
  timeoutInMinutes: 30
  workspace:
    clean: all
  steps:
  - checkout: none
    fetchDepth: 1
    submodules: false
  - script: |
     echo.$(Build.SourceVersion)
     echo.$(Build.SourceVersion)>$(Build.ArtifactStagingDirectory)\__commit.txt
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline Artifact'
    inputs:
      artifactName: '__commit'
      targetPath: '$(Build.ArtifactStagingDirectory)'

- job: build_onnxruntime_web
  dependsOn: Extract_commit
  pool:
    vmImage: 'windows-latest'
  timeoutInMinutes: 30
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: false
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '__commit'
      path: $(Pipeline.Workspace)
    displayName: 'Get commit SHA'
  - script: |
     set /p __commit__=<$(Pipeline.Workspace)\__commit.txt
     git fetch origin +%__commit__%:refs/remotes/origin/%__commit__%
     git checkout --force %__commit__%
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Read commit SHA and checkout'
  - script: |
     git submodule sync -- cmake\external\onnx
     git submodule update --init -- cmake\external\onnx
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Checkout submodule onnx'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
  - script: |
     npm ci
    workingDirectory: '$(Build.SourcesDirectory)\js'
    displayName: 'npm ci /js/'
  - script: |
     npm ci
    workingDirectory: '$(Build.SourcesDirectory)\js\common'
    displayName: 'npm ci /js/common/'
  - script: |
     npm ci
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'npm ci /js/web/'
  - script: |
     npm run pull:wasm
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'npm run pull:wasm'
  - script: |
     npm run build
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'Build ort-web'
  - script: |
     npm test
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'Run ort-web tests - unpacked mode'
  - script: |
     npm test --  --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'Run ort-web tests - packed mode'
  - script: |
      npm test -- --env=firefox
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - Firefox browser'
  - script: |
      npm test --  --env=firefox --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - packed mode with Firefox browser'
  - script: |
      npm test -- --env=edge
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - Edge browser'
  - script: |
      npm test --  --env=edge --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - packed mode with Edge browser'
  - template: templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

- job: test_onnxruntime_web
  dependsOn: Extract_commit
  pool:
    vmImage: 'macOS-10.15'
  timeoutInMinutes: 60
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: false
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '__commit'
      path: $(Pipeline.Workspace)
    displayName: 'Get commit SHA'
  - script: |
      export __commit__=<$(Pipeline.Workspace)/__commit.txt
      git fetch origin +$__commit__:refs/remotes/origin/$__commit__
      git checkout --force $__commit__
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Read commit SHA and checkout'
  - script: |
      git submodule sync -- cmake/external/onnx
      git submodule update --init -- cmake/external/onnx
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Checkout submodule onnx'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
  - script: |
      npm ci
    workingDirectory: '$(Build.SourcesDirectory)/js'
    displayName: 'npm ci /js/'
  - script: |
      npm ci
    workingDirectory: '$(Build.SourcesDirectory)/js/common'
    displayName: 'npm ci /js/common/'
  - script: |
      npm ci
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'npm ci /js/web/'
  - script: |
     npm run pull:wasm
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'npm run pull:wasm'
  - script: |
      npm run build
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Build ort-web'
  - script: |
      npm test
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - unpacked mode'
  - script: |
      npm test --  --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - packed mode'
  - script: |
      npm test -- --env=firefox
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - Firefox browser'
  - script: |
      npm test --  --env=firefox --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - packed mode with Firefox browser'
  - script: |
      npm test -- --env=edge
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - Edge browser'
  - script: |
      npm test --  --env=edge --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - packed mode with Edge browser'
  - script: |
      python3 tools/python/run_android_emulator.py --android-sdk-root $(ANDROID_SDK_ROOT) --create-avd --system-image "system-images;android-29;google_apis;x86_64" --start --emulator-extra-args="-partition-size 1024" --window --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Start Android emulator'
  - script: |
      npm install --prefix $(Build.SourcesDirectory)/build/appium appium
      python3 tools/python/run_appium.py --start --appium-path $(Build.SourcesDirectory)/build/appium
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Install and run appium'
  - script: |
      npm test -- --env=android
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - Android Chrome browser'
  - script: |
      npm test -- --env=android --webgl-texture-pack-mode -b=webgl
    workingDirectory: '$(Build.SourcesDirectory)/js/web'
    displayName: 'Run ort-web tests - packed mode with Android Chrome browser'
  - script: |
      python3 tools/python/run_appium.py --stop
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Stop Appium'
  - script: |
      python3 tools/python/run_android_emulator.py --android-sdk-root $(ANDROID_SDK_ROOT) --stop --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Stop Android emulator'
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
